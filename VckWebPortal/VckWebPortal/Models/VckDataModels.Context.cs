//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VckWebPortal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<card> cards { get; set; }
        public virtual DbSet<hw_coinhopper_accounts> hw_coinhopper_accounts { get; set; }
        public virtual DbSet<hw_dispenser_accounts> hw_dispenser_accounts { get; set; }
        public virtual DbSet<hw_dispenser_trays> hw_dispenser_trays { get; set; }
        public virtual DbSet<bookingcode> bookingcodes { get; set; }
        public virtual DbSet<clearing_log> clearing_log { get; set; }
        public virtual DbSet<credential> credentials { get; set; }
        public virtual DbSet<hw_billvalidator_counter> hw_billvalidator_counter { get; set; }
        public virtual DbSet<hw_billvalidator_log> hw_billvalidator_log { get; set; }
        public virtual DbSet<hw_coinhopper_log> hw_coinhopper_log { get; set; }
        public virtual DbSet<hw_dispenser_log> hw_dispenser_log { get; set; }
        public virtual DbSet<hw_error_log> hw_error_log { get; set; }
        public virtual DbSet<hw_failed_payouts> hw_failed_payouts { get; set; }
        public virtual DbSet<hw_gooddispenser_accounts> hw_gooddispenser_accounts { get; set; }
        public virtual DbSet<hw_mifare_log> hw_mifare_log { get; set; }
        public virtual DbSet<operating_defaultemails> operating_defaultemails { get; set; }
        public virtual DbSet<operating_disordersstatus> operating_disordersstatus { get; set; }
        public virtual DbSet<session> sessions { get; set; }
        public virtual DbSet<user_datasection> user_datasection { get; set; }
        public virtual DbSet<user_namespaces> user_namespaces { get; set; }
        public virtual DbSet<vouchercard_clearing_log> vouchercard_clearing_log { get; set; }
        public virtual DbSet<vouchercard_log> vouchercard_log { get; set; }
        public virtual DbSet<wallet_cards> wallet_cards { get; set; }
    
        public virtual int AddError(string unit_id, string error_msg)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            var error_msgParameter = error_msg != null ?
                new ObjectParameter("error_msg", error_msg) :
                new ObjectParameter("error_msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddError", unit_idParameter, error_msgParameter);
        }
    
        public virtual int AddGoods(string unit_id, Nullable<int> new_Goods)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            var new_GoodsParameter = new_Goods.HasValue ?
                new ObjectParameter("New_Goods", new_Goods) :
                new ObjectParameter("New_Goods", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGoods", unit_idParameter, new_GoodsParameter);
        }
    
        public virtual ObjectResult<AddStock_Result> AddStock(string unit_id, string trayname, Nullable<int> amount)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            var traynameParameter = trayname != null ?
                new ObjectParameter("trayname", trayname) :
                new ObjectParameter("trayname", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddStock_Result>("AddStock", unit_idParameter, traynameParameter, amountParameter);
        }
    
        public virtual int AddTransaction(string unit_id, string time, string applicationname, string terminalid, string actseq, string aid, string refnumber, string trxrefnum, string authcode, string encryptedpan, Nullable<int> amount, string currency, Nullable<decimal> paymenttype, Nullable<decimal> tray, string printablecardnumber)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(string));
    
            var applicationnameParameter = applicationname != null ?
                new ObjectParameter("applicationname", applicationname) :
                new ObjectParameter("applicationname", typeof(string));
    
            var terminalidParameter = terminalid != null ?
                new ObjectParameter("terminalid", terminalid) :
                new ObjectParameter("terminalid", typeof(string));
    
            var actseqParameter = actseq != null ?
                new ObjectParameter("actseq", actseq) :
                new ObjectParameter("actseq", typeof(string));
    
            var aidParameter = aid != null ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(string));
    
            var refnumberParameter = refnumber != null ?
                new ObjectParameter("refnumber", refnumber) :
                new ObjectParameter("refnumber", typeof(string));
    
            var trxrefnumParameter = trxrefnum != null ?
                new ObjectParameter("trxrefnum", trxrefnum) :
                new ObjectParameter("trxrefnum", typeof(string));
    
            var authcodeParameter = authcode != null ?
                new ObjectParameter("authcode", authcode) :
                new ObjectParameter("authcode", typeof(string));
    
            var encryptedpanParameter = encryptedpan != null ?
                new ObjectParameter("encryptedpan", encryptedpan) :
                new ObjectParameter("encryptedpan", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(string));
    
            var paymenttypeParameter = paymenttype.HasValue ?
                new ObjectParameter("paymenttype", paymenttype) :
                new ObjectParameter("paymenttype", typeof(decimal));
    
            var trayParameter = tray.HasValue ?
                new ObjectParameter("tray", tray) :
                new ObjectParameter("tray", typeof(decimal));
    
            var printablecardnumberParameter = printablecardnumber != null ?
                new ObjectParameter("printablecardnumber", printablecardnumber) :
                new ObjectParameter("printablecardnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTransaction", unit_idParameter, timeParameter, applicationnameParameter, terminalidParameter, actseqParameter, aidParameter, refnumberParameter, trxrefnumParameter, authcodeParameter, encryptedpanParameter, amountParameter, currencyParameter, paymenttypeParameter, trayParameter, printablecardnumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AskGoods(string unit_id)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AskGoods", unit_idParameter);
        }
    
        public virtual ObjectResult<AskStock_Result> AskStock(string unit_id)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AskStock_Result>("AskStock", unit_idParameter);
        }
    
        public virtual int CreateAccessTokenByUsername(string username, string password, ObjectParameter accesstoken, ObjectParameter valid_until)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAccessTokenByUsername", usernameParameter, passwordParameter, accesstoken, valid_until);
        }
    
        public virtual int CreateBookingCode(string accesstoken, string card_id, Nullable<int> valueincent, ObjectParameter bookingcode, ObjectParameter valid_until)
        {
            var accesstokenParameter = accesstoken != null ?
                new ObjectParameter("accesstoken", accesstoken) :
                new ObjectParameter("accesstoken", typeof(string));
    
            var card_idParameter = card_id != null ?
                new ObjectParameter("card_id", card_id) :
                new ObjectParameter("card_id", typeof(string));
    
            var valueincentParameter = valueincent.HasValue ?
                new ObjectParameter("valueincent", valueincent) :
                new ObjectParameter("valueincent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateBookingCode", accesstokenParameter, card_idParameter, valueincentParameter, bookingcode, valid_until);
        }
    
        public virtual ObjectResult<EndOfShiftReport_Result> EndOfShiftReport(string unit_id)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EndOfShiftReport_Result>("EndOfShiftReport", unit_idParameter);
        }
    
        public virtual int SetGoods(string unit_id, Nullable<int> new_Goods)
        {
            var unit_idParameter = unit_id != null ?
                new ObjectParameter("unit_id", unit_id) :
                new ObjectParameter("unit_id", typeof(string));
    
            var new_GoodsParameter = new_Goods.HasValue ?
                new ObjectParameter("New_Goods", new_Goods) :
                new ObjectParameter("New_Goods", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetGoods", unit_idParameter, new_GoodsParameter);
        }
    }
}
